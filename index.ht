<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3: Setting path fills</title>
        <script type="text/javascript" src="d3.v3.min.js"></script>
        <script type="text/javascript" src="colorbrewer.js"></script>
        <style type="text/css">
            /* No style rules here yet */       
            div.tooltip {   
						  position: absolute;           
						  text-align: center;           
						  /*width: 150px;                  */
						  height: 25px;                 
						  padding: 2px;             
						  font-size: 12px;     
						  background: #000000;
						  color: #FFFFFF;
						  border: 1px;              
						  pointer-events: none;         
						}   
						#svg {
							float: left
						}     
        </style>
    </head>
    <body>
        <script type="text/javascript">

      Array.max = function( array ){
			    return Math.max.apply( Math, array );
			};
			Array.min = function( array ){
			    return Math.min.apply( Math, array );
			};


      var dataDict = {};
      var dataValues = [];
      var sortableData = [];
      d3.json("data.json", function(json) {
      	sortableData = json;
      	json.forEach(function(e) {
      			var name = e[0].trim();
      			var value = e[1];

      			dataValues.push(value);
      			dataDict[name] = value;  // json have list of [name, date] lists
      	})

      	sortableData.sort(function(a, b) {return a[1] - b[1]}).reverse();
      });

      var width  = window.innerWidth*0.7;
		  var height = window.innerHeight;

		  var vis = d3.select("body").append("svg")
			   .attr("width", width).attr("height", height).attr("id", "svg")

		  d3.json("mosobl.geojson", function(json) {

		  var color = d3.scale.quantize() // set color range function
								    			.domain([Array.min(dataValues), Array.max(dataValues)])
								    			.range(colorbrewer.Purples[9].reverse());

			var projection = d3.geo.mercator()
				.scale(1)
				.translate([0, 0]);

			// Create a path generator.
			var path = d3.geo.path()
				.projection(projection);

			// Compute the bounds of a feature of interest, then derive scale & translate.
			var b = path.bounds(json),
				s = .95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height),
				t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];

			// Update the projection to use computed scale & translate.
			projection
				.scale(s)
				.translate(t);

			  // add a rectangle to see the bound of the svg
			vis.append("rect").attr('width', width).attr('height', height)
				.style('stroke', 'black').style('fill', 'none');

			var div = d3.select("body").append("div")   
		  .attr("class", "tooltip")               
		  .style("opacity", 0);

			vis.selectAll("path").data(json.features).enter().append("path")
				.attr("d", path)
				.style("fill", function(d) {
    			return color(dataDict[d.properties.NAME]); 
  			})
				.style("stroke-width", "1")
				.style("stroke", "black")
				.style("opacity", 0.8)

				  //Adding mouseevents
				.on("mouseover", function(d) {
				    d3.select(this).style("opacity", 1);
				    var name = d.properties.NAME;
				    if(!(name in dataDict)){
				    	console.log(name + " не найден в данных");
				    }
				    div.style("opacity", 1)
						   .text(name + " " + dataDict[name])
						   .style("left", (d3.event.pageX) + "px")
						   .style("top", (d3.event.pageY -30) + "px");
				})
				.on("mouseout", function() {
				    d3.select(this).style("opacity", 0.8);
				    div.style("opacity", 0);
				});



				//Prepare the outputed string
       	var theTable = "";
	      for(var j=0;j<sortableData.length;j++){
	          theTable += '<tr>';
	          for(var k=0;k<2;k++){             
	            theTable += '<td>'+sortableData[j][k]+'</td>';
	          }
	          theTable += '</tr>';
	      }

	      console.log(theTable)
	      var table = document.createElement("table");  // создаем html-элемент canvas
	      table.innerHTML = theTable;
	      document.body.appendChild(table);



			});

	

			

        </script>
    </body>
</html>